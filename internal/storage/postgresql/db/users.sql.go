// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const DeleteUser = `-- name: DeleteUser :one
DELETE FROM
  users
WHERE
  id = $1
RETURNING id AS res
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, DeleteUser, id)
	var res int32
	err := row.Scan(&res)
	return res, err
}

const InsertUser = `-- name: InsertUser :one
INSERT INTO users (
  email,
  user_name,
  password
)
VALUES (
  $1,
  $2,
  $3
)
RETURNING id, created_at
`

type InsertUserParams struct {
	Email    string
	UserName string
	Password string
}

type InsertUserRow struct {
	ID        int32
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRow(ctx, InsertUser, arg.Email, arg.UserName, arg.Password)
	var i InsertUserRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const SelectUser = `-- name: SelectUser :one
SELECT
  id,
  email,
  user_name,
  password,
  created_at
FROM
  users
WHERE
  id = $1
LIMIT 1
`

func (q *Queries) SelectUser(ctx context.Context, id int32) (Users, error) {
	row := q.db.QueryRow(ctx, SelectUser, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserName,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users SET
  email     = $1,
  user_name = $2,
  password  = $3
WHERE id = $4
RETURNING id AS res
`

type UpdateUserParams struct {
	Email    string
	UserName string
	Password string
	ID       int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, UpdateUser,
		arg.Email,
		arg.UserName,
		arg.Password,
		arg.ID,
	)
	var res int32
	err := row.Scan(&res)
	return res, err
}
